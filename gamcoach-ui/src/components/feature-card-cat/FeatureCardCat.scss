@import '../../define';
@use 'sass:math';

$range-thumb-width: 8px;
$base-circle-radius: 5px;
$card-v-padding: 8px;
$card-h-padding: 16px;

.arrow-right {
  box-sizing: border-box;
  position: relative;
  display: block;
  width: 15px;
  height: 5px;

  &::after,
  &::before {
    content: "";
    display: block;
    box-sizing: border-box;
    position: absolute;
    right: 0px;
  }

  &::after {
    width: 8px;
    height: 8px;
    border-top: 2px solid $gray-400;
    border-right: 2px solid $gray-400;
    transform: rotate(45deg);
    bottom: -2px;
  }

  &::before {
    width: 100%;
    height: 2px;
    bottom: 1px;
    background: $gray-400;
  }
}

.value-label {
  color: white;
  background-color: $gray-500;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 20px;
  height: 20px;
  line-height: 1;
  border-radius: 3px;
}

.feature-slider {
  position: absolute;
  // Header + top padding + hist height + padding
  top: calc(40px + 35px + 56px + 2px);
  width: 100%;
  display: flex;
  flex-direction: column;

  .track {
    width: calc(100% - #{2 * $card-h-padding});
    background-color: $gray-200;
    // Only use top and bottom border here to avoid offsetting the left and right
    // with artifacts => cause misalignment with svg dimension
    border-top: 1px solid white;
    border-bottom: 1px solid white;
    position: absolute;
    left: 0px;
    height: 4px;

    .range-track {
      position: absolute;
      height: 6px;
      background-color: $orange-100;
    }
  }

  .svg-icon.icon-level-thumb {
    fill: $gray-400;
    color: $gray-400;
    stroke: $gray-100;
    stroke-width: 6;
    top: -10px;
    z-index: 1;

    :global(svg) {
      width: 1rem;
      height: 1rem;
    }
  }

  :global(.svg-icon.icon-level-thumb.user) {
    fill: $blue-400;
    color: $blue-400;
    stroke: $blue-100;
  }

  :global(.svg-icon.icon-level-thumb.coach) {
    fill: $green-500;
    color: $green-500;
    stroke: $green-100;
  }
}

.track-label {
  position: absolute;
  z-index: 2;
  top: 5px;
  left : 0px;

  .value-label {
    width: 15px;
    height: 15px;
    font-size: 0.8rem;
    cursor: pointer;
    background: $gray-500;
  }

  .thumb-label {
    top: 0px;
    transition: transform 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
  }

  &:global(.hover) {
    .thumb-label {
      transform: translateX(-50%) translateY(100%) scale(1);
    }
  }
}

.track-point {
  border: 100%;
  position: absolute;
  width: 2px;
  height: 2px;
  z-index: 1;
  top: 0px;
  left: 0px;
  background-color: $gray-400;
}

.svg-hist {
  $highlight-stroke-width: 3;

  :global(.bar) {
    cursor: pointer;
  }

  :global(.level-bar) {
    fill: none;
    stroke: none;
  }

  :global(.density-bar) {
    fill: $gray-500;
  }

  :global(.back-bar) {
    fill: $gray-200;
  }

  :global(.bar.selected .density-bar) {
    fill: $orange-300;
  }

  :global(.bar.selected .back-bar) {
    fill: $orange-100;
  }

  :global(.bar.user .level-bar) {
    stroke: $blue-400;
    stroke-width: $highlight-stroke-width;
  }

  :global(.bar.original .level-bar) {
    stroke: $gray-600;
    stroke-width: $highlight-stroke-width;
  }

  :global(.bar.coach .level-bar) {
    stroke: $green-500;
    stroke-width: $highlight-stroke-width;
  }

  :global(.text-background) {
    fill: hsla(0, 0%, 100%, 0);
  }

  :global(.text-background.hover) {
    fill: change-color($blue-50, $alpha: 1);
  }

  :global(.y-label) {
    cursor: pointer;
    font-size: 0.9rem;
    fill: $gray-600;
  }

  :global(.y-label.original) {
    fill: $gray-600;

    :global(.text-background) {
      fill: $gray-200;
    }
  }

  :global(.y-label.original.user) {
    fill: $gray-600;
    :global(.text-background) {
      fill: $gray-200;
    }
  }

  :global(.y-label.user) {
    fill: $blue-800;

    :global(.text-background) {
      fill: $blue-50;
    }
  }

  :global(.y-label.coach) {
    fill: $green-700;

    :global(.text-background) {
      fill: $green-50;
    }
  }
}

.thumb-label {
  &.thumb-label-middle {
    top: 15px;
  }

  &::before {
    transform: translate(-50%, -220%) rotate(45deg);
  }
}
