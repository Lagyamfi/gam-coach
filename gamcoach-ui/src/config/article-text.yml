
# Text for the article

tool:
  pre:
    - >
      As Machine Learning (ML) models are increasingly used to inform high-stake
      decisions, such as loan approvals and school admissions, there has been a
      surge of interest in the field of algorithmic recourseâ€”designing
      techniques that suggest actions to alter the outcomes of ML models. In a
      loan application scenario, a recourse plan that alters a loan rejection
      decision can have the form of "if you increase your annual income by $5k,
      you will get the loan." GAM Coach is a web-based interactive tool that
      <strong>empower end-users to iteratively discover recourse plans that meet
      their preferences.</strong>
    - >
      Existing recourse generation techniques have the implicit assumption that
      ML developers understand what input variables can be changed and how
      difficult it is to change them. However, the actionability of a recourse
      plan is ultimately subjective and personal, and unlikely to match
      developers' expectations completely. To bridge this mismatch, GAM Coach
      <strong>enable end-users to easily specify recourse preferences</strong>,
      such as the <em>difficulty</em> and <em>acceptable range</em> of a
      feature, and <strong>iteratively fine-tune recourse plans</strong> until
      finding satisfactory ones.

youtubeTimes:
  - startTime: 0
    name: Introduction
    timestamp: (0:00-0:34)
  - startTime: 36
    name: Feature Card Organization
    timestamp: (0:34-0:50)
  - startTime: 53
    name: Recourse Plan Tabs
    timestamp: (0:50-1:00)
  - startTime: 60
    name: Explore Hypothetical Values of a Continuous Feature
    timestamp: (1:00-1:15)
  - startTime: 76
    name: Specify Feature Difficulty
    timestamp: (1:16-1:24)
  - startTime: 84
    name: Specify Acceptable Range of a Continuous Feature
    timestamp: (1:24-1:34)
  - startTime: 94
    name: Specify Max Number of Features a Plan Can Change
    timestamp: (1:34-1:49)
  - startTime: 109
    name: Bookmark Satisfactory Plans
    timestamp: (1:49-2:00)
  - startTime: 120
    name: Explore Hypothetical Values of a Categorical Feature
    timestamp: (2:00-2:08)
  - startTime: 128
    name: Specify Acceptable Range of a Categorical Feature
    timestamp: (2:08-2:35)
  - startTime: 155
    name: Download a verifiable Recourse Receipt
    timestamp: (2:35-2:48)

video:
  - header: null
    video: explore
    isWide: false
    figureID: 1
    caption: >
      The main view of GAM Coach consists of a <em>Coach Menu</em> (top) and a <em>Feature Panel</em> (bottom).
      End-users can easily browse different recourse plans and associated feature information.
    text:
      - >
        GAM Coach's user interface consists of a <em>Coach Menu</em> and a
        <em>Feature Panel</em> (Figure 1). For each recourse iteration, GAM Coach
        generate 5 diverse recourse plans and organizes them as five extendable
        tabs in the <em>Coach Menu</em>. When a user clicks on a tab, it extends
        to show the decision score associated with the recourse plan. Then,
        the <em>Feature Panel</em> updates its content to reflect the selected
        recourse plan. The <em>Feature Panel</em> displays each feature used in
        the model as a <em>Feature Card</em> and organizes these cards into three
        sections: (1) Suggested Changes, where the selected plan makes changes on
        these features; (2) Configured Features, where features have preferences
        configured; (3) and all other features. Users can click each <em>Feature
        Card</em> to view details regard the value distribution, configure
        recourse preferences, and experiment with hypothetical values.

  - header: Specify Recourse Preferences
    video: explore
    isWide: false
    figureID: 2
    caption: >
      The main view of GAM Coach consists of a Coach Menu (top) and a Feature
      Panel (bottom). End-users can easily browse different recourse plans and
      associated feature information.
    text:
      - >
        Users can easily specify their recourse preferences through GAM Coach
        user interfaces. To configure the <strong>difficulty</strong> of
        changing a feature in real-life, users can click the smiley icon on the
        top right of each <em>Feature Card</em> and choose an accurate
        difficulty level. There are six difficulty levels, ranging from very
        easy to change to impossible to change. When generating new recourse
        plans, GAM Coach will prioritize features that are easy for a user to
        change, and GAM Coach will not change features that are set as
        impossible to change.
      - >
        Users can drag the orange slider and click the orange bars to specify an
        <strong>acceptable range</strong> for a continuous feature or a
        categorical feature, respectively. When generating new recourse plans,
        GAM Coach will only make changes within the user's specified acceptable
        ranges. Finally, users can click the dropdown to configure the
        <strong>max number of features</strong> that a plan can change. When
        generating new recourse plans, GAM Coach will only change at most that
        number of features in each plan. It is useful when users want to find
        more concise plans.

  - header: Ask "What-If" Questions
    video: explore
    isWide: false
    figureID: 3
    caption: >
      The main view of GAM Coach consists of a Coach Menu (top) and a Feature Panel (bottom).
      End-users can easily browse different recourse plans and associated feature information.
    text:
      - >
        To help end-users better understand how the underlying model makes
        decisions, GAM Coach allows users to <strong>experiment with any
        hypothetical feature values</strong> and inspect their effects on the
        model output. For continuous features, users can drag the blue thumb on
        the slider to try an alternative feature value. For categorical
        features, users can click the text labels next to the bars. Since GAM
        Coach uses modern web technologies to run the underlying ML model
        locally in the user's browser, users can inspect how hypothetical
        feature values change the model decision in real-time.

  - header: Save a Verifiable Recourse Receipt
    video: explore
    isWide: false
    figureID: 3
    caption: >
      The main view of GAM Coach consists of a Coach Menu (top) and a Feature Panel (bottom).
      End-users can easily browse different recourse plans and associated feature information.
    text:
      - >
        When a user finds a satisfactory recourse plan, they can click the star icon next to the
        plan name to bookmark this plan.
        The user can also click the bookmark button in the <em>Coach Menu</em> to open the
        <em>Bookmarks Window</em> that presents a visual summary of all saved recourse plans.
        If the user is happy with all saved plans, they can download a recourse receipt.
        Introduced by <a href='https://arxiv.org/abs/1711.00399'>Wachter et al.</a>,
        a recourse receipt is a contract that the decision maker agrees to provide the decision subject
        with the preferred outcome if the a recourse plan is achieved in a specified period.
      - >
        GAM Coach is the first system that realizes this receipt concept.
        Leveraging modern public-key cryptography, GAM Coach introduces a
        verifiable recourse receipt system. When a user downloads a receipt, GAM
        Coach writes a <a
        href='https://en.wikipedia.org/wiki/Pretty_Good_Privacy'>PGP-signed</a>
        (with the decision maker's private key) plain text that includes a
        timestamp, the user's original data, a hash of the model weights, and
        the saved recourse plans. Therefore, a decision subject can hold
        the decision maker accountable by proving the authenticity of the
        receipt to a third-party authority with the decision maker's public key.
        In addition, the decision maker can prevent a decision subject to cheat
        with a counterfeit receipt by verifying the receipt's integrity with the private
        key.

developer:
  - >
    hello

development:
  - >
    hello
